from flask import Blueprint, jsonify, request
from main import db
# from models.genre import genre

genre = Blueprint('genre', __name__)

# The GET routes endpoint
@genre.route("/", methods=["GET"])
def get_genre():
    # get all the genre from the database table
    # genre_list = genre.query.all()
    # Convert the genre from the database into a JSON format and store them in result
    #result = genre_schema.dump(genre_list)
    # return the data in JSON format
    #return jsonify(result)
    return "List of genre retrieved"

# The POST route endpoint
@genre.route("/", methods=["POST"])
def create_genre():
    # #Create a new genre
    # genre_fields = genre_schema.load(request.json)

    # new_genre = genre()
    # new_genre.title = genre_fields["title"]
    # new_genre.description = genre_fields["description"]
    # new_genre.status = genre_fields["status"]
    # new_genre.priority = genre_fields["priority"]
    # # not taken from the request, generated by the server
    # new_genre.date = date.today()
    # # add to the database and commit
    # db.session.add(new_genre)
    # db.session.commit()
    # #return the genre in the response
    # return jsonify(genre_schema.dump(new_genre))
    return "genre created"


# Finally, we round out our CRUD resource with a DELETE method
@genre.route("/<int:id>/", methods=["DELETE"])
def delete_genre(id):
    # #get the genre id invoking get_jwt_identity
    # genre_id = get_jwt_identity()
    # #Find it in the db
    # genre = genre.query.get(genre_id)
    # #Make sure it is in the database
    # if not genre:
    #     return abort(401, description="Invalid genre")
    # # Stop the request if the genre is not an admin
    # if not genre.admin:
    #     return abort(401, description="Unauthorised genre")
    # # find the genre
    # genre = genre.query.filter_by(id=id).first()
    # #return an error if the genre doesn't exist
    # if not genre:
    #     return abort(400, description= "genre doesn't exist")
    # #Delete the genre from the database and commit
    # db.session.delete(genre)
    # db.session.commit()
    # #return the genre in the response
    # return jsonify(genre_schema.dump(genre))
    return "genre Deleted"