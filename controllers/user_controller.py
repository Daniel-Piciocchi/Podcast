from flask import Blueprint, jsonify, request
from main import db
from models.user import User

user = Blueprint('user', __name__)

# The GET routes endpoint
@user.route("/", methods=["GET"])
def get_user():
    # get all the user from the database table
    # user_list = user.query.all()
    # Convert the user from the database into a JSON format and store them in result
    #result = user_schema.dump(user_list)
    # return the data in JSON format
    #return jsonify(result)
    return "List of user retrieved"

# The POST route endpoint
@user.route("/user", methods=["POST"])
def create_user():
    # #Create a new user
    # user_fields = user_schema.load(request.json)

    new_user = User()
    # new_user.title = user_fields["title"]
    # new_user.name = user_fields["name"]
    # new_user.name = user_fields["name"]
    # new_user.name = user_fields["name"]

    return "user created"

    new_user.name = 'leigh'
    new_user.email = 'l@g.com'
    new_user.password = 'pass'

    # new_user.status = user_fields["status"]
    # new_user.priority = user_fields["priority"]
    # # not taken from the request, generated by the server
    # new_user.date = date.today()
    # # add to the database and commit

    db.session.add(new_user)
    db.session.commit()
    # #return the user in the response
    # return jsonify(user_schema.dump(new_user))
    return "user created"


# Finally, we round out our CRUD resource with a DELETE method
@user.route("/<int:id>/", methods=["DELETE"])
def delete_user(id):
    # #get the user id invoking get_jwt_identity
    # user_id = get_jwt_identity()
    # #Find it in the db
    # user = User.query.get(user_id)
    # #Make sure it is in the database
    # if not user:
    #     return abort(401, description="Invalid user")
    # # Stop the request if the user is not an admin
    # if not user.admin:
    #     return abort(401, description="Unauthorised user")
    # # find the user
    # user = user.query.filter_by(id=id).first()
    # #return an error if the user doesn't exist
    # if not user:
    #     return abort(400, description= "user doesn't exist")
    # #Delete the user from the database and commit
    # db.session.delete(user)
    # db.session.commit()
    # #return the user in the response
    # return jsonify(user_schema.dump(user))
    return "user Deleted"